(******************************************************************************
 * Featherweight-OCL --- A Formal Semantics for UML-OCL Version OCL 2.5
 *                       for the OMG Standard.
 *                       http://www.brucker.ch/projects/hol-testgen/
 *
 * This file is part of HOL-TestGen.
 *
 * Copyright (c) 2011-2018 Universit√© Paris-Saclay, Univ. Paris-Sud, France
 *               2013-2017 IRT SystemX, France
 *               2011-2015 Achim D. Brucker, Germany
 *               2016-2018 The University of Sheffield, UK
 *               2016-2017 Nanyang Technological University, Singapore
 *               2017-2018 Virginia Tech, USA
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     * Neither the name of the copyright holders nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************)

theory Doc
imports Gram
begin
ML_file "~~/src/Doc/antiquote_setup.ML"

text\<open>
The command @{command print_syntax'} takes as input the format
generated by @{command print_syntax} (more precisely the section between ``\<^verbatim>\<open>prods\<close>''
and ``\<^verbatim>\<open>print modes\<close>''), then it generates in the output window a text to be ``manually''
included in other documents (the printing resembles to @{command sledgehammer}).

There are various options for keeping specific lines or discarding them:
\<^item> @{keyword "init"}/@{keyword "remove"}: For example in @{file "Gram_Main.thy"}, we have copied the
  native grammar of the object-logic HOL (from @{theory Main}).
  The option \<^theory_text>\<open>init Main\<close> (in \<^theory_text>\<open>print_syntax' init Main\<close>)
  defines at the position where it is written the name of this grammar to be \<open>Main\<close>.
  Later, we can use this name to
  discard all lines appearing in \<open>Main\<close>: this is what is done in
  @{file "Gram_Generator_dynamic_sequential.thy"}, when we used the option
  \<^theory_text>\<open>remove Main\<close>.

\<^item> @{keyword "add"}: Unlike @{keyword "remove"}, it is possible to explicitly add specific
  sections to keep. For instance, we could write:
  @{theory_text [display]
   \<open>print_syntax' remove Main add "Fun.updbinds", aprop
  prods:
    Fun.updbind = any[0] ":=" any[0] => "_updbind" (1000)\<close>}
  \<^verbatim>\<open>(* [etc...]*)\<close>

\<^item> Lines can also be discarded or added with these special symbols
  ``\<^theory_text>\<open><<<\<close>'' or ``\<^theory_text>\<open>>>>\<close>'':
  @{theory_text [display] \<open>
  print_syntax' remove Main (*OCL_compiler_generator_dynamic*) add "Fun.updbinds", aprop
  prods:
  >>>
    Fun.updbind = any[0] ":=" any[0] => "_updbind" (1000)
    Fun.updbinds = Fun.updbind[0] "," Fun.updbinds[0] => "_updbinds" (1000)
    Fun.updbinds = Fun.updbind[-1] (-1)
  <<<
    HOL.case_syn = any[0] "\<Rightarrow>" any[0] => "_case1" (10)
    HOL.case_syn = any[0] "=>" any[0] => "_case1" (10)
  >>>
    HOL.cases_syn = HOL.case_syn[0] "|" HOL.cases_syn[0] => "_case2" (1000)
    HOL.cases_syn = HOL.case_syn[-1] (-1)\<close>}
  \<^verbatim>\<open>(* [etc...]*)\<close>
    Instead of matching parentheses, this behaves as a stack (no need to
    have the same number of ``\<^theory_text>\<open><<<\<close>'' exactly matching ``\<^theory_text>\<open>>>>\<close>'').

\<^item> In order to keep a specific number of lines or dropping them,
  there are also @{keyword "keep"} or @{keyword "drop"}:
  @{theory_text [display] \<open>
  print_syntax' init p
  prods:
    Fun.updbind = any[0] ":=" any[0] => "_updbind" (1000)
  drop 2  Fun.updbinds = Fun.updbind[0] "," Fun.updbinds[0] => "_updbinds" (1000)
    Fun.updbinds = Fun.updbind[-1] (-1)
    HOL.case_syn = any[0] "\<Rightarrow>" any[0] => "_case1" (10)
  drop  HOL.case_syn = any[0] "=>" any[0] => "_case1" (10)
    HOL.cases_syn = HOL.case_syn[0] "|" HOL.cases_syn[0] => "_case2" (1000)
  >>>
  keep 2  HOL.cases_syn = HOL.case_syn[-1] (-1)
    HOL.letbind = pttrn[0] "=" any[0] => "_bind" (10)\<close>}
  \<^verbatim>\<open>(* [etc...]*)\<close>
\<close>

text\<open>
Finally after each line, it is possible to include some textual
cartouches with @{keyword "tex"}:
  @{theory_text [display] \<open>
  print_syntax' init a
  prods:
    Fun.updbind = any[0] ":=" any[0] => "_updbind" (1000)
      tex \<open>this is a first line\<close>
    Fun.updbinds = Fun.updbind[0] "," Fun.updbinds[0] => "_updbinds" (1000)
    Fun.updbinds = Fun.updbind[-1] (-1)
      tex \<open>this is another example\<close>
    HOL.case_syn = any[0] "\<Rightarrow>" any[0] => "_case1" (10)
    HOL.case_syn = any[0] "=>" any[0] => "_case1" (10)\<close>}
  \<^verbatim>\<open>(* [etc...]*)\<close>

Other options are also provided like @{keyword "no_tex"}, @{keyword "tex_raw"}.
\<close>
end
